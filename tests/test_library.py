'''
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DO NOT EDIT THIS FILE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''

import io
from unittest import mock, TestCase

from library import Library


class TestLibraryClass(TestCase):
    def setUp(self) -> None:
        # Runs before every test case
        super().setUp()

        self.library = Library()

    def test_constructor(self):
        self.assertEqual([], self.library.books)

    def add_books(self):
        # In alphabetical order to accomadate bonus or no bonus
        self.library.add_title('Braiding Sweetgrass', 'Robin Wall Kimmerer')
        self.library.add_title('Sapiens', 'Yuval Noah Harari')
        self.library.add_title('The Body Keeps the Score', 'Bessel van der Kolk')   

    def test_add_title(self):
        self.add_books()

        self.assertEqual(3, len(self.library.books))
        self.assertEqual('Sapiens', self.library.books[1].title)
        self.assertEqual('Bessel van der Kolk', self.library.books[2].author)

    def test_count_books(self):
        self.assertEqual(0, self.library.count_books())

        self.add_books()

        self.assertEqual(3, self.library.count_books())

    def test_remove_title_empty(self):
        # If the code does not error, test passes!
        self.library.remove_title('Title not in library')

        self.add_books()
        self.library.remove_title('Sapiens')

        self.assertEqual(2, self.library.count_books())

        for book in self.library.books:
            self.assertNotEqual('Sapiens', book.title)

    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_display_books(self, mock_stdout):
        self.add_books()

        self.library.display_books()

        expected = 'Braiding Sweetgrass - Robin Wall Kimmerer\n'
        expected += 'Sapiens - Yuval Noah Harari\n'
        expected += 'The Body Keeps the Score - Bessel van der Kolk\n'

        self.assertEqual(expected, mock_stdout.getvalue())
